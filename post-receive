#!/bin/bash
while read oldrev newrev refname
do
    # branch
    # branch=$(git rev-parse --symbolic --abbrev-ref $refname)
    # upper command puts error when the branch doesn't exist.
    # so far, get the branch name from refname
    branch=${refname##*/}

    # tmp_checkout_dir
    repo_name=`basename \`pwd\``
    project_name=${repo_name%.*}
    tmp_checkout_dir=~/checkouts/$project_name/$branch

    # clean up
    rm -rf $tmp_checkout_dir

    # found out if the branch was deleted
    git show-ref --verify --quiet $refname
    if [ "$?" = 1 ]; then
        exit 0
    fi

    # checkout
    mkdir -p $tmp_checkout_dir
    env GIT_WORK_TREE=$tmp_checkout_dir git checkout -f $branch
    cd $tmp_checkout_dir

    # change permissions
    #permission_777_dirs=()
    permission_777_dirs=("logs" "user_logs")
    for dir in ${permission_777_dirs[@]}; do
        chmod 777 $dir
    done

    # rsync
    option='-rlpgoDuvc --size-only'
    #exclude_list=''
    exclude_list='exclude-rsync'
    #dryrun=''
    dryrun='--dry-run'
    #delete=''
    delete='--delete'

    case $branch in
        "develop")
            src=./
            destination=~/www/192.168.0.148/
            ;;
        release* | hotfix*)
            exit 0
            ;;
        "master")
            src=./htdocs/
            destination=hogehoge
            ;;
        *)
            # do nothing
            exit 0
            ;;
    esac

    rsync $option --exclude-from="$exclude_list" $dryrun $delete $src $destination
done
